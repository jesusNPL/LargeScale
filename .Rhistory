require(picante)
require(ape)
ftree <- read.nexus("Data/Phylo/furnariiMCC.nex")
length(ftree$tip.label)
head(treeB$tip.label)
length(ftree$tip.label)
head(ftree$tip.label)
extent(franges)
?lets.presab
fpam <- lets.presab(franges, xmn = -110.0817, xmx = -34.78897, ymn = -55.98222, ymx = 29.0965 remove.cells = TRUE, remove.sp = TRUE, cover = 0.5, resol = 1, count = TRUE)
fpam <- lets.presab(franges, xmn = -110.0817, xmx = -34.78897, ymn = -55.98222, ymx = 29.0965, remove.cells = TRUE, remove.sp = TRUE, cover = 0.5, resol = 1, count = TRUE)
fpam <- lets.presab(franges, xmn = -110.0817, xmx = -34.78897, ymn = -55.98222, ymx = 29.0965, remove.cells = TRUE, remove.sp = TRUE, cover = 0.5, resol = 1, count = FALSE)
fpam$Presence_and_Absence_Matrix[1:10, 1:10]
class(fpam)
fpam$Presence_and_Absence_Matrix[1:10, 1:10]
class(fpam)
class(fpam)
fpam$Presence_and_Absence_Matrix[1:10, 1:10]
fpam$Species_name
fcom <- fpam$Presence_and_Absence_Matrix
fpam$Species_name
fcom <- fpam$Presence_and_Absence_Matrix
sppNames <- fpam$Species_name
sppNames <- gsub(" ", "_", sppNames)
sppNames
names(fcom) <- c("long", "lat", sppNames)
fcom[1:10, 1:10]
colnames(fcom) <- c("long", "lat", sppNames)
fcom[1:10, 1:10]
dim(fcom)
fcom <- fpam$Presence_and_Absence_Matrix
dim(fcom)
fpam <- lets.presab(franges, xmn = -110.0817, xmx = -34.78897, ymn = -55.98222, ymx = 29.0965, remove.cells = TRUE, remove.sp = TRUE, resol = 1, count = FALSE)
class(fpam)
fpam$Presence_and_Absence_Matrix[1:10, 1:10]
dim(fpam$Presence_and_Absence_Matrix)
fcom <- fpam$Presence_and_Absence_Matrix
dim(fcom)
sppNames <- fpam$Species_name
sppNames <- gsub(" ", "_", sppNames)
colnames(fcom) <- c("long", "lat", sppNames)
fcom[1:10, 1:10]
dim(fcom)
matched <- match.phylo.comm(phy = ftree, comm = fcom[, 3:654])
matched$phy
dim(matched$comm)
matched$phy
dim(matched$comm)
Fpd <- pd(matched$comm, matched$phy, include.root = FALSE) # Faith's PD
head(Fpd)
cor.test(Fpd$SR, Fpd$PD)
plot(Fpd$SR, Fpd$PD)
Fmpd <- mpd(matched$comm, cophenetic(matched$phy)) # Faith's PD
head(Fmpd)
Fmpd <- mpd(matched$comm, cophenetic(matched$phy)) # Faith's PD
head(Fmpd)
cophenetic(matched$phy)
Fmpd <- mpd(matched$comm, cophenetic(matched$phy)) # Faith's PD
head(Fmpd)
Fmpd
Fmntd <- mntd(matched$comm, cophenetic(matched$phy))
head(fmntd)
head(Fmntd)
head(Fmpd, 10)
head(Fmntd, 10)
cor.test(Fmpd$SR, Fmntd$PD)
cor.test(Fmpd, Fmntd)
plot(Fmpd, Fmntd)
# SESMPD
Fsesmpd <- ses.mpd(matched$comm, cophenetic(matched$phy), runs = 99)
?ses.mpd
head(Fsesmpd, 15)
# SESMNTD
Fsesmntd <- ses.mntd(matched$comm, cophenetic(matched$phy), runs = 99)
head(Fsesmntd, 15)
require(maptools)
require(rgdal)
require(raster)
require(sp)
require(rangeBuilder)
library(spdep)
library(ncf)
require(geiger)
require(dismo)
library(letsR)
library(rworldmap)
require(spatialreg)
require(picante)
require(ape)
oaks <- read.table("Data/OCC/live.oaks.txt", header = TRUE)
head(oaks, 10)
plot(oaks[c(2:3)], col = "blue", pch = 19)
plot(countriesCoarse, add = TRUE)
unique(oaks$Species)
que_vir <- subset(oaks, oaks$Species == "Quercus_virginiana")
oaks_dups <- duplicated(oaks[, c(2:3)])
### NOTE: the function "duplicated" returns the results of a logical test (e.g. TRUE or FALSE)
# How many are duplicates?
length(which(oaks_dups == TRUE))
# How many are NOT duplicates?
length(which(oaks_dups == FALSE))
# Keep only those lines that are not duplicates
oaks_dups_row <- which(oaks_dups == TRUE)
# What's the size? That is, how many points are duplicates
length(oaks_dups_row)
# Create another object withoyt the duplicate records
oaks_nodups <- oaks[-oaks_dups_row,]
# What are the dimensions of the new object?
dim(oaks_nodups)
# Take a look at the first rows of data
head(oaks_nodups)
plot(oaks$Longitude, oaks$Latitude, pch = 19, col = "red", cex = 2)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
# create a polygon around the species' records
oaks_hull <- convHull(oaks_nodups[, c(2:3)])
plot(oaks_hull)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
que_vir <- subset(oaks_nodups, oaks_nodups$Species == "Quercus_virginiana")
que_vir_hull <- convHull(que_vir[, c(2:3)])
plot(que_vir_hull)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "black")
plot(oaks_hull)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
# Plot only Quecus virginiana
plot(que_vir_hull, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "red")
# Add world maps
plot(countriesCoarse, add = TRUE)
que_vir_alphahull <- getDynamicAlphaHull(que_vir, fraction = 0.95,
coordHeaders = c("Longitude", "Latitude"),
clipToCoast = 'no')[[1]]
plot(que_vir_alphahull, lwd = 2, col = "red")
plot(que_vir_hull, add = TRUE, lwd = 2, lty = 2)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "green")
plot(countriesCoarse, add = TRUE, lwd = 2)
franges <- readOGR(dsn = "Data/Franges", layer = "Furnarii_ranges_geo")
head(franges@data)
neo_ras <- raster()
# Set the raster "extent"
extent(neo_ras) <- extent(franges)
res(neo_ras) <- 1
neo_ras
values(neo_ras) <- 0
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
plot(f_sr_raster)
plot(countriesCoarse, add = TRUE)
f_MRD_raster <- rasterize(franges, neo_ras, field = "RD", fun = mean)
plot(f_MRD_raster)
#change the color scale
colfuncYellows <- colorRampPalette(c("#d7191c", "#fdae61", "#ffffbf", "#abd9e9",
"#2c7bb6"))
plot(f_MRD_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)
plot(countriesCoarse, add = T)
par(mfrow = c(1, 2))
plot(f_sr_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(f_MRD_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)
# 2ยบ degrees
neo_ras_2dg <- raster()
# Set the raster "extent"
extent(neo_ras_2dg) <- extent(franges)
res(neo_ras_2dg) <- 2
neo_ras_2dg
values(neo_ras_2dg) <- 0
# 4ยบ degrees
neo_ras_4dg <- raster()
# Set the raster "extent"
extent(neo_ras_4dg) <- extent(franges)
res(neo_ras_4dg) <- 4
neo_ras_4dg
values(neo_ras_4dg) <- 0
# Furnariides at 2ยบ of long-lat
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
# Furnariides at 4ยบ of long-lat
f_sr_4dg_raster <- rasterize(franges, neo_ras_4dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
par(mfrow = c (1, 3))
plot(f_sr_raster, main = "Furnariides richness 1dg")
plot(countriesCoarse, add = T)
plot(f_sr_2dg_raster, main = "Furnariides richness 2dg")
plot(countriesCoarse, add = T)
plot(f_sr_4dg_raster, main = "Furnariides richness 4dg")
plot(countriesCoarse, add = T)
bio1 <- raster("Data/Envi/bio1.bil")
bio1
bio12 <- raster("Data/Envi/bio12.bil")
bio12
bio1_neo <- crop(bio1, extent(franges))
bio12_neo <- crop(bio12, extent(franges))
plot(bio1_neo, main = "Annual Mean Temperature")
plot(bio12_neo, main = "Annual Precipitation")
bio12_neo
f_ras_coords <- xyFromCell(f_sr_raster, 1:length(values(f_sr_raster)))
f_ras_coords
f_ras_bio1 <- extract(bio1_neo, f_ras_coords)
f_ras_bio12 <- extract(bio12_neo, f_ras_coords)
f_ras_rich <- values(f_sr_raster)
f_ras_mrd <- values(f_MRD_raster)
fdata <- na.omit(data.frame(f_ras_coords, f_ras_rich, f_ras_mrd, f_ras_bio1,
f_ras_bio12))
cor.test(fdata$f_ras_rich, fdata$f_ras_bio1)
cor.test(fdata$f_ras_rich, fdata$f_ras_bio12)
plot(fdata$f_ras_bio1, fdata$f_ras_rich, xlab = "Bio 1", ylab = "Richness")
plot(fdata$f_ras_bio12, fdata$f_ras_rich, xlab = "Bio 12", ylab = "Richness")
dev.off()
fols <- lm(f_ras_rich ~ f_ras_bio1 + f_ras_bio12, data = fdata)
summary(fols)
fols2 <- lm(f_ras_rich ~ f_ras_bio1 + f_ras_bio12 + f_ras_mrd, data = fdata)
summary(fols2)
autocor_SR <- ncf::correlog(fdata$x, fdata$y, z = fdata$f_ras_rich, na.rm = T,
increment = 1, resamp = 1)
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
coords <- fdata[1:2]
coords <- as.matrix(coords)
nb1.5 <- dnearneigh(coords, 0, 1.5)
nb1.5.w <- nb2listw(nb1.5, glist = NULL, style = "W", zero.policy = TRUE)
residuals_ols <- residuals(fols2)
plot(residuals_ols
)
autocor_ols_res <- correlog(fdata$x, fdata$y, z = residuals(fols),
increment = 1, resamp = 1)
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
fols2
sar_nb1.5.w <- errorsarlm(fols2, listw = nb1.5.w, data = fdata, quiet = FALSE,
zero.policy = TRUE, na.action = na.exclude)
summary(sar_nb1.5.w)
residuals_sar_nb1.5.w <- residuals(sar_nb1.5.w)
autocor_sar_nb1.5.w <- correlog(fdata$x, fdata$y, z = residuals(sar_nb1.5.w),
na.rm = T, increment = 1, resamp = 1)
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)
summary(sar_nb1.5.w)
summary(fols2)
source("https://raw.githubusercontent.com/jesusNPL/BetaDivNA/master/SARr2.R")
SARr2(Lfull = sar_nb1.5.w$LL, Lnull = sar_nb1.5.w$logLik_lm.model, N = nrow(fdata))
ftree <- ape::read.nexus("Data/Phylo/furnariiMCC.nex")
fpam <- lets.presab(franges, xmn = -110.0817, xmx = -34.78897, ymn = -55.98222,
ymx = 29.0965, remove.cells = TRUE, remove.sp = TRUE,
resol = 1, count = TRUE)
fpam
fpam$Presence_and_Absence_Matrix[1:10, 1:10]
fcom <- fpam$Presence_and_Absence_Matrix
dim(fcom)
sppNames <- fpam$Species_name
sppNames <- gsub(" ", "_", sppNames)
colnames(fcom) <- c("long", "lat", sppNames)
fcom[1:10, 1:10]
dim(fcom)
matched <- match.phylo.comm(phy = ftree, comm = fcom[, 3:654])
Fpd <- pd(matched$comm, matched$phy, include.root = FALSE) # Faith's PD
head(Fpd)
# SESMPD
Fsesmpd <- ses.mpd(matched$comm, cophenetic(matched$phy), runs = 99)
head(Fsesmpd, 15)
head(Fsesmpd, 20)
tail(Fsesmpd, 20)
require(maptools)
require(rgdal)
require(raster)
require(sp)
require(rangeBuilder)
library(spdep)
library(ncf)
require(geiger)
require(dismo)
library(letsR)
library(rworldmap)
require(spatialreg)
require(picante)
require(ape)
oaks <- read.table("Data/OCC/live.oaks.txt", header = TRUE)
head(oaks)
tail(oaks)
plot(oaks[c(2:3)], col = "blue", pch = 19)
plot(countriesCoarse, add = TRUE)
unique(oaks$Species)
que_vir <- subset(oaks, oaks$Species == "Quercus_virginiana")
plot(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(countriesCoarse, add = TRUE)
oaks_dups <- duplicated(oaks[, c(2:3)])
### NOTE: the function "duplicated" returns the results of a logical test (e.g. TRUE or FALSE)
# How many are duplicates?
length(which(oaks_dups == TRUE))
# How many are NOT duplicates?
length(which(oaks_dups == FALSE))
# Keep only those lines that are not duplicates
oaks_dups_row <- which(oaks_dups == TRUE)
# What's the size? That is, how many points are duplicates
length(oaks_dups_row)
# Create another object withoyt the duplicate records
oaks_nodups <- oaks[-oaks_dups_row,]
# What are the dimensions of the new object?
dim(oaks_nodups)
# Take a look at the first rows of data
head(oaks_nodups)
plot(oaks$Longitude, oaks$Latitude, pch = 19, col = "red", cex = 2)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
# create a polygon around the species' records
oaks_hull <- convHull(oaks_nodups[, c(2:3)])
str(oaks_hull)
# create a polygon around the species' records
oaks_hull <- convHull(oaks_nodups[, c(2:3)])
str(oaks_hull)
# Plot the created polygon
plot(oaks_hull)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
plot(que_vir_hull)
que_vir_hull <- convHull(que_vir[, c(2:3)])
plot(que_vir_hull)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "black")
# Plot all live oaks
plot(oaks_hull)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
# Plot only Quecus virginiana
plot(que_vir_hull, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "red")
# Add world maps
plot(countriesCoarse, add = TRUE)
que_vir_alphahull <- getDynamicAlphaHull(que_vir, fraction = 0.95,
coordHeaders = c("Longitude", "Latitude"),
clipToCoast = 'no')[[1]]
plot(que_vir_alphahull, lwd = 2, col = "red")
plot(que_vir_hull, add = TRUE, lwd = 2, lty = 2)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "green")
plot(countriesCoarse, add = TRUE, lwd = 2)
franges <- readOGR(dsn = "Data/Franges", layer = "Furnarii_ranges_geo")
head(franges@data)
acro_fon <- subset(franges, franges@data == "Acrobatornis fonsecai")
acro_fon <- subset(franges, franges$SCINAME == "Acrobatornis fonsecai")
ana_dor <- subset(franges, franges$SCINAME == "Anabazenops dorsalis")
# Plot all live oaks
plot(acro_fon)
plot(ana_dor, add = TRUE)
plot(acro_fon)
# Add world maps
plot(countriesCoarse, add = TRUE)
fur_ruf <- subset(franges, franges$SCINAME == "Furnarius rufus")
plot(fur_ruf)
# Add world maps
plot(countriesCoarse, add = TRUE)
plot(fur_ruf)
plot(ana_dor, add = TRUE)
# Add world maps
plot(countriesCoarse, add = TRUE)
plot(fur_ruf, col = "green")
plot(ana_dor, add = TRUE, col = "red")
# Add world maps
plot(countriesCoarse, add = TRUE)
neo_ras <- raster()
# Set the raster "extent"
extent(neo_ras) <- extent(franges)
res(neo_ras) <- 1
neo_ras
values(neo_ras) <- 0
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
plot(f_sr_raster)
plot(countriesCoarse, add = T)
#change the color scale
colfuncYellows <- colorRampPalette(c("#d7191c", "#fdae61", "#ffffbf", "#abd9e9",
"#2c7bb6"))
plot(f_sr_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(countriesCoarse, add = T)
head(franges@data)
f_MRD_raster <- rasterize(franges, neo_ras, field = "RD", fun = mean)
plot(f_MRD_raster)
plot(countriesCoarse, add = T)
plot(f_MRD_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)
plot(countriesCoarse, add = T)
par(mfrow = c(1, 2))
plot(f_sr_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(f_MRD_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)
obj <- lm(values(f_MRD_raster) ~ values(f_sr_raster))
cor.test(values(f_sr_raster), values(f_MRD_raster))
plot(values(f_MRD_raster) ~ values(f_sr_raster), xlab = "SR", ylab = "MRD")
abline(obj, col = "red", lwd = 2)
# 2ยบ degrees
neo_ras_2dg <- raster()
# Set the raster "extent"
extent(neo_ras_2dg) <- extent(franges)
res(neo_ras_2dg) <- 2
neo_ras_2dg
values(neo_ras_2dg) <- 0
# 4ยบ degrees
neo_ras_4dg <- raster()
# Set the raster "extent"
extent(neo_ras_4dg) <- extent(franges)
res(neo_ras_4dg) <- 4
neo_ras_4dg
values(neo_ras_4dg) <- 0
# Furnariides at 2ยบ of long-lat
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
# Furnariides at 4ยบ of long-lat
f_sr_4dg_raster <- rasterize(franges, neo_ras_4dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
par(mfrow = c (1, 3))
plot(f_sr_raster, main = "Furnariides richness 1dg")
plot(countriesCoarse, add = T)
plot(f_sr_2dg_raster, main = "Furnariides richness 2dg")
plot(countriesCoarse, add = T)
plot(f_sr_4dg_raster, main = "Furnariides richness 4dg")
plot(countriesCoarse, add = T)
bio1 <- raster("Data/Envi/bio1.bil")
bio1
bio12 <- raster("Data/Envi/bio12.bil")
bio12
par(mfrow = c(2, 1))
plot(bio1)
plot(bio12)
bio1_neo <- crop(bio1, extent(franges))
bio12_neo <- crop(bio12, extent(franges))
par(mfrow = c(1, 2))
plot(bio1_neo, main = "Annual Mean Temperature")
plot(bio12_neo, main = "Annual Precipitation")
f_ras_coords <- xyFromCell(f_sr_raster, 1:length(values(f_sr_raster)))
f_ras_bio1 <- extract(bio1_neo, f_ras_coords)
f_ras_bio12 <- extract(bio12_neo, f_ras_coords)
f_ras_rich <- values(f_sr_raster)
f_ras_mrd <- values(f_MRD_raster)
fdata <- na.omit(data.frame(f_ras_coords, f_ras_rich, f_ras_mrd, f_ras_bio1, f_ras_bio12))
#f_ras_rich_noNA <- ifelse(is.na(f_ras_rich), 0, f_ras_rich)
#f_ras_bio1_noNA <- ifelse(is.na(f_ras_bio1), 0, f_ras_bio1)
#f_ras_bio12_noNA <- ifelse(is.na(f_ras_bio12), 0, f_ras_bio12)
#fdata_noNA <- data.frame(f_ras_coords, f_ras_rich_noNA, f_ras_bio1_noNA,
#                         f_ras_bio12_noNA)
cor.test(fdata$f_ras_rich, fdata$f_ras_bio1)
cor.test(fdata$f_ras_rich, fdata$f_ras_bio12)
par(mfrow = c(1, 2))
plot(fdata$f_ras_bio1, fdata$f_ras_rich, xlab = "Bio 1", ylab = "Richness")
plot(fdata$f_ras_bio12, fdata$f_ras_rich, xlab = "Bio 12", ylab = "Richness")
fols <- lm(f_ras_rich ~ f_ras_bio1 + f_ras_bio12, data = fdata)
summary(fols)
fols2 <- lm(f_ras_rich ~ f_ras_bio1 + f_ras_bio12 + f_ras_mrd, data = fdata)
summary(fols2)
autocor_SR <- ncf::correlog(fdata$x, fdata$y, z = fdata$f_ras_rich, na.rm = T,
increment = 1, resamp = 1)
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
coords <- fdata[1:2]
coords <- as.matrix(coords)
nb1.5 <- dnearneigh(coords, 0, 1.5)
nb1.5.w <- nb2listw(nb1.5, glist = NULL, style = "W", zero.policy = TRUE)
residuals_ols <- residuals(fols2)
plot(residuals_ols)
autocor_ols_res <- correlog(fdata$x, fdata$y, z = residuals(fols),
increment = 1, resamp = 1)
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
par(mfrow = c(2, 1))
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS model", cex = 1.5)
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
sar_nb1.5.w <- errorsarlm(fols2, listw = nb1.5.w, data = fdata, quiet = FALSE,
zero.policy = TRUE, na.action = na.exclude)
summary(sar_nb1.5.w)
residuals_sar_nb1.5.w <- residuals(sar_nb1.5.w)
autocor_sar_nb1.5.w <- correlog(fdata$x, fdata$y, z = residuals(sar_nb1.5.w),
na.rm = T, increment = 1, resamp = 1)
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)
par(mfrow = c(2, 1))
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)
summary(sar_nb1.5.w)
summary(fols2)
source("https://raw.githubusercontent.com/jesusNPL/BetaDivNA/master/SARr2.R")
SARr2(Lfull = sar_nb1.5.w$LL, Lnull = sar_nb1.5.w$logLik_lm.model, N = nrow(fdata))
